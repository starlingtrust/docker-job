#!/usr/bin/env python

import argparse
import sys
import os

import docker
import docker.errors

parser = argparse.ArgumentParser()

parser.add_argument("image",
    metavar = "NAME[:TAG]",
    help = "Name of the image")

parser.add_argument("--server-url",
    metavar = "URL",
    help = "Docker server URL")

parser.add_argument("--server-version",
    metavar = "VERSION", default = "auto",
    help = "Docker server version (default: %(default)s)")

# separate docker-job arguments from the job's
if ("--" in sys.argv):
    i = sys.argv.index("--")
    args, job_args = sys.argv[:i], sys.argv[i+1:]
else:
    args, job_args = sys.argv, []

args = parser.parse_args(args[1:])

# build arguments for the Docker client
client_kwargs = {
    "version": args.server_version}

if (args.server_url is not None):
    client_kwargs["base_url"] = args.server_url

# build arguments for the Docker container
container_kwargs = {}

container_kwargs.update({
    "detach": True})

client = docker.from_env(**client_kwargs)

try:
    image = client.images.get(args.image)
except docker.errors.ImageNotFound:
    image = client.images.pull(args.image)

try:
    container = client.containers.create(
        image, job_args, **container_kwargs)

    container.start()

    output = container.attach(
        stdout = True, stderr = True,
        stream = True, logs = True)
    
    for line in output:
        sys.stdout.write(line.decode("utf-8"))
        sys.stdout.flush()

    sys.exit(container.wait())

except docker.errors.APIError as e:
    sys.stderr.write("Error: %s" % e)
    sys.exit(1)
